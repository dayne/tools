#!/usr/bin/env ruby
# ruby basic get - wget replacement with simple dance magic for a known md5sum
# download a file from a URL and save it along with it's md5sum
# rbget <url>    # saves to current directory
# rbget <url> -m <expected md5sum>
# rbget <url> -f # force the overwriting of an existing file
# rbget <url> -d <target dir for download>
require 'open-uri'
require 'tempfile'
require 'digest/md5'
require 'fileutils'
require 'optparse'
require 'tempfile'


begin # BEGIN THE FUN

def usage(msg=nil)
  puts(msg) if msg
  program_name = File.basename($0)
  puts "Incorrect usage of #{program_name}." unless msg
  puts "Check out --help for options" unless msg
  exit 1
end

def test
  puts 'testing rbget'
  system($0, "http://beef.gina.alaska.edu/pub/i/pavoni.jpg", "-m","d7e828b46d70506a622805ba7825e4e0","-v")
  puts "error: missing pavoni.jpg" unless File.exist?('pavoni.jpg')
  puts "error: missing pavoni.jpg.md5" unless File.exist?('pavoni.jpg.md5')
  puts "error: md5sum mismatch" unless `md5sum pavoni.jpg`.split[0] == 'd7e828b46d70506a622805ba7825e4e0'
  FileUtils::rm 'pavoni.jpg' if File.exists? 'pavoni.jpg'
  FileUtils::rm 'pavoni.jpg.part' if File.exists? 'pavoni.jpg.part'
  FileUtils::rm 'pavoni.jpg.md5' if File.exists? 'pavoni.jpg.md5'
end

url_regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/

force = filename = target_dir = md5sum = source = nil

ARGV.options do |opt|
  opt.banner = "Usage: ruby #{File.basename($0)} [options] <file url>"

  opt.on("Options")
  opt.on("-f", "--force", "force removal of an existing target file") { force = true }
  opt.on("-m", "--md5sum <md5sum>", String, "expected md5sum of the file") { |md5sum|  
    usage('invalid md5sum') if md5sum.size != 32
  }
  opt.on("-d", "--dir <dir>", String, "target directory to download to") { |target_dir| }
  opt.on("-h", "--help", "This help.. right here.. now") {puts opt; exit 0}
  opt.on("-v", "--verbose", "Jibber Jabber More") { $verbose = true }
  opt.on("-t", "--test", "Test it - BEEF w/ La Pavoni") { test(); exit 1 }
  opt.on("-n", "--name <filename>", "What to call the downloaded file" ) { |filename| }
  opt.on("-u", "--update", "Update rbget from latest in github") do 
    puts "updating to latest version of rbget in github"
    system($0,'http://github.com/dayne/tools/tree/master%2Fdigest%2Frbget?raw=true',"-n","rbget.new")
    if File.exists?('rbget.new.md5')
      FileUtils::rm 'rbget.new.md5' 
      FileUtils::mv $0, "#{$0}.old"
      FileUtils::mv 'rbget.new', $0
      FileUtils::chmod 0755, $0
    else
      puts "something blew up trying to update rbget"
    end
    exit 0
  end
  opt.parse!
end

usage if ARGV.length == 0 

source = ARGV.shift
target_dir = Dir.pwd unless target_dir

if (!source) or (source.size < 12) or (!url_regexp.match(source))
  usage "source url is invalid or too short : #{source}"
end
 
filename = File.basename source unless filename

if $verbose
  puts "source: #{source}"
  puts "target_dir: #{target_dir}"
  puts "md5sum: #{md5sum}"
  puts "force: #{force}"
  puts "filename: #{filename}"
end

Dir.chdir target_dir

if force
  tf = File.new(filename,'w')
else
  if File.exists?(filename)
    puts "#{filename} exists already - exiting out"
    exit 1
  end
  tf = File.new("#{filename}.part",'w')
end
total = nil
last = Time.now
digest = Digest::MD5.new
ticker = 0

puts "starting " if $verbose

MAX_ATTEMPTS = 3
tries = 0
while( tries < MAX_ATTEMPTS )  do 
  begin
    open( source ) do |remote|
      while not remote.eof?
        r = remote.read(18192)
        digest << r
        tf << r
        tf.fsync
      end
    end
  	tries = MAX_ATTEMPTS # yay finished
  rescue Exception => error
    if tries < MAX_ATTEMPTS
      puts "first attempt at open(#{source}) failed - #{error}"
      puts "trying again"
      tries += 1
    else
      raise "Unable to connect and read from #{source}"
    end
  end
end
tf.close
puts "done" if $verbose

md5 = digest.hexdigest

File.open( "#{filename}.md5", "w" ) { |f| f << md5 + "  " + filename + "\n" }

if md5sum
  if md5sum  == md5
    puts "download succeeded - md5sum matchs: #{md5}" 
  else
    puts "mismatching md5sum:
    expecting: #{md5sum}
    got:       #{md5}"
    exit 1
  end
end

unless force
  puts "moving #{tf.path} to #{filename}" if $verbose
  FileUtils::mv tf.path, filename
end

rescue Exception => error # NO FUN!
  unless error.to_s == 'exit'
    puts error 
    $stderr.puts error.backtrace.join("\n\t")
  end
  exit 1
end # hope we had fun
